package veterinaria.Vistas;

import veterinaria.CustomPanel;
import veterinaria.Entidades.Estado;
import static com.sun.java.accessibility.util.AWTEventMonitor.addWindowListener;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import veterinaria.AccesoADatos.ClienteDAO;
import veterinaria.AccesoADatos.DAO;
import veterinaria.AccesoADatos.MascotaDAO;
import veterinaria.AccesoADatos.ReservaDAO;
import veterinaria.Entidades.Cliente;
import veterinaria.Entidades.Mascota;
import veterinaria.Entidades.Reserva;
import veterinaria.Utilidades;
import veterinaria.HorariosListener;

public class Horarios extends javax.swing.JInternalFrame {

    private LocalDate selectedDate;
    private DefaultTableModel TurnosModel = new DefaultTableModel() {
        private Estado estado = Estado.NADA;
        private boolean estadoCliente;

        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    private HorariosListener listener;

    /**
     * Creates new form Horarios
     */
    public Horarios(LocalDate selectedDate) {
// Dentro del constructor de tu JInternalFrame
        CustomPanel customPanel = new CustomPanel();
        this.setContentPane(customPanel);
        initComponents();
        this.selectedDate = selectedDate;
        //updateFechaLabel();
        updateFechaTField();
        armarCabecerareservaTurno();
// Configura la tabla para que muestre las cuadr√≠culas
        TablaTurnos.setShowGrid(true);
        TablaTurnos.setGridColor(Color.GRAY);
        showSelectedDate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaTurnos = new javax.swing.JTable();
        jBSalir = new javax.swing.JButton();
        jLFecha = new javax.swing.JLabel();
        jBGuardar = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Seleccion de horario");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );

        TablaTurnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablaTurnos);

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/home256_24783.png"))); // NOI18N
        jBSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLFecha.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N

        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/Save_37110.png"))); // NOI18N
        jBGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        salirAplicacion();
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        try {
            //guardar reserva
            obtenerInformacionCeldaSeleccionada();
        } catch (Exception ex) {
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaTurnos;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JLabel jLFecha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void armarCabecerareservaTurno() {
        TurnosModel.addColumn("Horario");
        TurnosModel.addColumn("Cliente");
        TurnosModel.addColumn("Mascota");
        ;

    }

//    private void salirAplicacion() {
//        if (Utilidades.confirmarSalida(this)) {
//            dispose();
//        }
//    }
    private void showSelectedDate() {

        if (selectedDate != null) {
            //JOptionPane.showMessageDialog(this, "Selected Date: " + selectedDate.toString(), "Selected Date", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Selected Date is null", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

//  
// no estoy usando este metodo
    private void updateFechaLabel() {
        if (selectedDate != null) {
            jLFecha.setText("Fecha seleccionada: " + selectedDate.toString());
        } else {
            jLFecha.setText("Fecha seleccionada: N/A");
        }
    }

    //coloca la fecha en textField de cabecera
    private void updateFechaTField() {
        if (selectedDate != null) {
            jTextField1.setText("Fecha seleccionada: " + selectedDate.toString());
        } else {
            jTextField1.setText("Fecha seleccionada: N/A");
        }
    }

//busca la informacion de la tabla y la guarda
    private void obtenerInformacionCeldaSeleccionada() throws Exception {
        ClienteDAO clienteD = ClienteDAO.obtenerInstancia();
        Cliente cliente = new Cliente();
        MascotaDAO mascotaD = MascotaDAO.obtenerInstancia();
        Mascota mascota = new Mascota();
        int filaSeleccionada = TablaTurnos.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Obtener el valor de la celda en la columna "Horario"
            Object valorHorario = TablaTurnos.getValueAt(filaSeleccionada, 0);

            // Obtener el valor de la celda en la columna "Cliente"
            Object valorDni = TablaTurnos.getValueAt(filaSeleccionada, 1);

            // Obtener el valor de la celda en la columna "Mascota"
            Object valorMascota = TablaTurnos.getValueAt(filaSeleccionada, 2);

            // Imprimir la informaci√≥n en la consola
            System.out.println("Horario: " + valorHorario);
            System.out.println("Cliente: " + valorDni);
            System.out.println("Mascota: " + valorMascota);

            try {
                String horarioSeleccionado = (String) valorHorario;
                String dniCliente = String.valueOf(valorDni);

                int DniCliente = Integer.parseInt(dniCliente);
                String nombreMascota = (String) valorMascota;

                cliente = clienteD.buscarListaClientexDni(DniCliente);
                mascota = mascotaD.buscarListaMascotaxAliasIdCliente(nombreMascota, cliente.getIdCliente());

                ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();
                int resultado = reservaDAO.guardarReserva(cliente.getIdCliente(), mascota.getIdMascota(), selectedDate, horarioSeleccionado, true);

                if (resultado != -1) {
                    // Pintar la fila reci√©n agregada
                    TablaTurnos.setRowSelectionInterval(filaSeleccionada, filaSeleccionada);

                    // Resaltar la fila con un color 
                    TablaTurnos.setSelectionBackground(new java.awt.Color(173, 216, 230));

                    JOptionPane.showMessageDialog(this, "Reserva guardada exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo guardar la reserva. Cliente o mascota no encontrados.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ClassNotFoundException | SQLException ex) {

                ex.printStackTrace();
            }
        }
    }

    // M√©todo para inicializar la tabla de turnos
    void initTimeTable(LocalDate selectedDate) {
        TurnosModel.setRowCount(0);

        int horaInicio = 10;
        int horaFin = 18;
        //inicializo la tabla con valores nulos

        ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();
        List<Reserva> listaDeReservas = new ArrayList<>();

        try {
            listaDeReservas = reservaDAO.buscarListaReservasxfecha(selectedDate);
        } catch (Exception ex) {
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int hora = horaInicio; hora <= horaFin; hora++) {
            String horario = String.format("%02d:00", hora);

            boolean reservaEnEsteHorario = false;
            for (Reserva tipo : listaDeReservas) {
                // Obtener el horario de Reserva como un objeto LocalTime
                LocalTime horarioReserva = tipo.getHorario();

                // Convertir horario (cadena) a un objeto LocalTime
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                LocalTime horarioComparar = LocalTime.parse(horario, formatter);

                // Comparar los horarios
                if (horarioReserva.equals(horarioComparar)) {
                    TurnosModel.addRow(new Object[]{tipo.getHorario(), tipo.getCliente().getApellido() + ", " + tipo.getCliente().getNombre(), tipo.getMascota().getAlias()});
                    reservaEnEsteHorario = true;
                    break;
                }
            }

            if (!reservaEnEsteHorario) {
                TurnosModel.addRow(new Object[]{horario, "", ""});
            }
        }

        TablaTurnos.setModel(TurnosModel);
        //si quiero ponerle colores a la tabla por columna o por fila
// Crear una instancia del renderizador personalizado
//CustomTableCellRenderer renderer = new CustomTableCellRenderer();
// Aplicar el renderizador a la columna (por ejemplo, columna 0)
//TablaTurnos.getColumnModel().getColumn(0).setCellRenderer(renderer);
//TablaTurnos.getColumnModel().getColumn(1).setCellRenderer(renderer);
//TablaTurnos.getColumnModel().getColumn(2).setCellRenderer(renderer);
//con el listener espera y responde a la accion del clic y seleccion en la tabla
        TablaTurnos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int filaSeleccionada = TablaTurnos.getSelectedRow();
                if (filaSeleccionada != -1) {
                    Object horarioSeleccionado = TurnosModel.getValueAt(filaSeleccionada, 0);

                    if (horarioSeleccionado != null && horarioSeleccionado instanceof LocalTime) {
                        // La celda contiene una reserva, puedes proceder a la cancelaci√≥n.

                        int respuesta = JOptionPane.showConfirmDialog(null, "¬øDesea cancelar el turno?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

                        if (respuesta == JOptionPane.YES_OPTION) {
                            // Realizas la cancelaci√≥n en la base de datos.
                            try {
                                ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();
                                LocalDate fechaSeleccionada = selectedDate;
                                LocalTime horario = (LocalTime) horarioSeleccionado;

                                reservaDAO.cancelarReserva(fechaSeleccionada, horario);
                                JOptionPane.showMessageDialog(null, "Reserva cancelada con √©xito");
                            } catch (Exception ex) {
                                Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
                                // Maneja cualquier error que ocurra al cancelar la reserva.
                            }

                            // actualiza la tabla
                            //TurnosModel.setValueAt(null, filaSeleccionada, 0); // Marca el turno como cancelado.
                            TurnosModel.setValueAt("", filaSeleccionada, 1); // Borra el DNI del cliente.
                            TurnosModel.setValueAt("", filaSeleccionada, 2); // Borra el nombre de la mascota.
                            TablaTurnos.repaint();
                        }
                    } else {
                        String DniCliente = JOptionPane.showInputDialog("Ingrese el DNI del cliente:");
                        if (DniCliente == null) {
                            return;
                        }
                        //  if (DniCliente != null) { // Aseg√∫rate de verificar si el usuario cancela el cuadro de di√°logo
                        if (!DniCliente.isEmpty()) { // Aseg√∫rate de verificar si el usuario cancela el cuadro de di√°logo
                            int dniCliente = Integer.parseInt(DniCliente);
                            System.out.println("DNI del cliente: " + dniCliente);
                            if (verificarExistenciaCliente(dniCliente)) {
                                String alias = JOptionPane.showInputDialog("Ingrese el nombre de la mascota:");
                                if (alias == null) {
                                    return;
                                }
                                if (!alias.isEmpty()) { // Aseg√∫rate de verificar si el usuario cancela el cuadro de di√°logo
                                    System.out.println("Nombre de la mascota: " + alias);
                                    if (verificarExistenciaMascota(alias)) {
                                        TurnosModel.setValueAt(DniCliente, filaSeleccionada, 1);
                                        TurnosModel.setValueAt(alias, filaSeleccionada, 2);
                                        TablaTurnos.repaint();
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Debes ingresar una mascota");
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Debes ingresar un dni");
                        }
                    }
                }
            }
        });
    }

//por si ingresa el dni de un cliente no registrado
    private boolean verificarExistenciaCliente(int dniCliente) {
        ClienteDAO clienteD = ClienteDAO.obtenerInstancia();
        try {
            Cliente cliente = clienteD.buscarListaClientexDni(dniCliente);
            if (cliente != null) {
                return true;
            } else {
                // Cliente no encontrado, muestra un mensaje en la ventana de la aplicaci√≥n
                JOptionPane.showMessageDialog(this, "Cliente no encontrado. Debes registrarte como cliente antes de hacer una reserva.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } catch (Exception ex) {
            // Manejar la excepci√≥n y mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, "Ocurri√≥ un error al verificar la existencia del cliente.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    private boolean verificarExistenciaMascota(String alias) {
        MascotaDAO mascotaDAO = MascotaDAO.obtenerInstancia();
        try {
            Collection<Mascota> mascotas = mascotaDAO.buscarListaMascotaxAlias(alias);
            System.out.println(mascotas);

            // Utiliza una expresi√≥n lambda para verificar si alguna mascota tiene el alias deseado
            // boolean mascotaEncontrada = mascotas.stream().anyMatch(mascota -> mascota.getAlias().equals(alias));
            boolean mascotaEncontrada = mascotas.stream().anyMatch(mascota -> mascota.getAlias().equalsIgnoreCase(alias));
            if (mascotaEncontrada) {
                System.out.println("Mascota encontrada. Puedes guardar la reserva.");
                JOptionPane.showMessageDialog(null, "Mascota encontrada. Puedes guardar la reserva.");
                return true;
            } else {
                // Mascota no encontrada, muestra un mensaje en la ventana de la aplicaci√≥n
                JOptionPane.showMessageDialog(this, "La mascota no est√° registrada.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
        } catch (Exception ex) {
            // Manejar la excepci√≥n y mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, "Ocurri√≥ un error al verificar la existencia de la mascota.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }

    public void setHorariosListener(HorariosListener listener) {
        this.listener = listener;
    }

// ...
    private void salirAplicacion() {
        if (Utilidades.confirmarSalida(this)) {
            if (listener != null) {
                listener.onHorariosFormClosed();
            }
            dispose();
        }
    }

}
