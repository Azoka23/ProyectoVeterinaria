package veterinaria.Vistas;

import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import veterinaria.AccesoADatos.ClienteDAO;
import veterinaria.AccesoADatos.DAO;
import veterinaria.AccesoADatos.MascotaDAO;
import veterinaria.AccesoADatos.ReservaDAO;
import veterinaria.Entidades.Cliente;
import veterinaria.Entidades.Mascota;
import veterinaria.Entidades.Reserva;
import veterinaria.Utilidades;

public class Horarios extends javax.swing.JInternalFrame {

    //private RanderizadoCeldas reservaRenderer = new RanderizadoCeldas();
    //private CustomPanel customPanel = new CustomPanel("/reservaturnos/Imagines/fonfoVete.png");
    private LocalDate selectedDate;
    private DefaultTableModel TurnosModel = new DefaultTableModel() {
        private Estado estado = Estado.NADA;
        private boolean estadoCliente;

        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };

    /**
     * Creates new form Horarios
     */
    public Horarios(LocalDate selectedDate) {
// Dentro del constructor de tu JInternalFrame
        CustomPanel customPanel = new CustomPanel();
        this.setContentPane(customPanel);
        initComponents();
        this.selectedDate = selectedDate;
        //updateFechaLabel();
        updateFechaTField();
        armarCabecerareservaTurno();

        showSelectedDate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaTurnos = new javax.swing.JTable();
        jBSalir = new javax.swing.JButton();
        jLFecha = new javax.swing.JLabel();
        jBGuardar = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Seleccion de horario");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );

        TablaTurnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TablaTurnos);

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/home256_24783.png"))); // NOI18N
        jBSalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLFecha.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N

        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/Save_37110.png"))); // NOI18N
        jBGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/gui_cancel_icon_157198.png"))); // NOI18N
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBSalir)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        salirAplicacion();
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        try {
            //guardar reserva

//System.out.println("Bot√≥n Guardar presionado");
            obtenerInformacionCeldaSeleccionada();
        } catch (Exception ex) {
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Cancelar turno
        try {
            cancelarCita();
        } catch (Exception ex) {
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaTurnos;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLFecha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void armarCabecerareservaTurno() {
//        TablaMaterias.addColumn(aColumn);
        TurnosModel.addColumn("Horario");
        TurnosModel.addColumn("Cliente");
        TurnosModel.addColumn("Mascota");
        ;
        //TablaTurnos.setModel(TurnosModel);
    }

    private void salirAplicacion() {
        if (Utilidades.confirmarSalida(this)) {
            dispose();
        }
    }

    private void showSelectedDate() {

        if (selectedDate != null) {
            //JOptionPane.showMessageDialog(this, "Selected Date: " + selectedDate.toString(), "Selected Date", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Selected Date is null", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

//    void initTimeTable(LocalDate selectedDate) {
//        try {
//            //TurnosModel = new DefaultTableModel() {
//            //   public boolean isCellEditable(int fila, int columna) {
//            //    return false;
//            //  }
//            // };
//
//            // armarCabecerareservaTurno(); // Aseg√∫rate de haber configurado la cabecera correctamente
//            // Limpiar la tabla antes de agregar nuevos datos
//            TurnosModel.setRowCount(0);
//            // Definir el rango de horas (por ejemplo, de 10 a 18)
//            int horaInicio = 10;
//            int horaFin = 18;
//            // Llenar la primera columna con horarios
//            //for (int hora = horaInicio; hora <= horaFin; hora++) {
//            //   String horario = String.format("%02d:00", hora);
//            //  TurnosModel.addRow(new Object[]{horario, "", ""}); // Columnas adicionales vac√≠as para Cliente y Mascota
//            // }
//            ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();
//            List<Reserva> listaDeReservas = new ArrayList();
//            listaDeReservas = reservaDAO.buscarListaReservasxfecha(selectedDate);
//            for (Reserva tipo : listaDeReservas) {
//                //JOptionPane.showMessageDialog(null, tipo);
//                //horario = String.format("%02d:00", tipo.getHorario());
//                TurnosModel.addRow(new Object[]{tipo.getHorario(),tipo.getCliente().getApellido()+ ", " +tipo.getCliente().getNombre() ,tipo.getMascota().getAlias() }); // Columnas adicionales vac√≠as para Cliente y Mascota
//
//            }
//// Establecer el modelo de la tabla
//            TablaTurnos.setModel(TurnosModel);
//            TablaTurnos.addMouseListener(new MouseAdapter() {
//                @Override
//                public void mouseClicked(MouseEvent e) {
//                    int filaSeleccionada = TablaTurnos.getSelectedRow();
//                    if (filaSeleccionada != -1) {
//                        String horarioSeleccionado = (String) TurnosModel.getValueAt(filaSeleccionada, 0);
//                        // Preguntar al usuario por el nombre del cliente
//                        String DniCliente = JOptionPane.showInputDialog("Ingrese el dni del cliente:");
//                        String nombreMascota = JOptionPane.showInputDialog("Ingrese el nombre de la mascota");
//                        // Ubicar el nombre del cliente en la segunda columna
//                        TurnosModel.setValueAt(DniCliente, filaSeleccionada, 1);
//                        TurnosModel.setValueAt(nombreMascota, filaSeleccionada, 2);
//
//                        // Actualizar la vista de la tabla
//                        // Configurar el renderizador en tu JTable
////TablaTurnos.setDefaultRenderer(Object.class, reservaRenderer);
//                        TablaTurnos.repaint();
//                    }
//                }
//            });
//        } catch (Exception ex) {
//            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//    }
// no estoy usando este metodo
    private void updateFechaLabel() {
        if (selectedDate != null) {
            jLFecha.setText("Fecha seleccionada: " + selectedDate.toString());
        } else {
            jLFecha.setText("Fecha seleccionada: N/A");
        }
    }

    private void updateFechaTField() {
        if (selectedDate != null) {
            jTextField1.setText("Fecha seleccionada: " + selectedDate.toString());
        } else {
            jTextField1.setText("Fecha seleccionada: N/A");
        }
    }
//busca la informacion de la tabla y la guarda

    private void obtenerInformacionCeldaSeleccionada() throws Exception {
        ClienteDAO clienteD = ClienteDAO.obtenerInstancia();
        Cliente cliente = new Cliente();
        MascotaDAO mascotaD = MascotaDAO.obtenerInstancia();
        Mascota mascota = new Mascota();
        int filaSeleccionada = TablaTurnos.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Obtener el valor de la celda en la columna "Horario"
            Object valorHorario = TablaTurnos.getValueAt(filaSeleccionada, 0);

            // Obtener el valor de la celda en la columna "Cliente"
            Object valorDni = TablaTurnos.getValueAt(filaSeleccionada, 1);

            // Obtener el valor de la celda en la columna "Mascota"
            Object valorMascota = TablaTurnos.getValueAt(filaSeleccionada, 2);

            // Imprimir la informaci√≥n en la consola
            System.out.println("Horario: " + valorHorario);
            System.out.println("Cliente: " + valorDni);
            System.out.println("Mascota: " + valorMascota);

            try {
                String horarioSeleccionado = (String) valorHorario;
                String dniCliente = String.valueOf(valorDni);

                int DniCliente = Integer.parseInt(dniCliente);
                String nombreMascota = (String) valorMascota;

                cliente = clienteD.buscarListaClientexDni(DniCliente);
                mascota = mascotaD.buscarListaMascotaxAliasIdCliente(nombreMascota, cliente.getIdCliente());

                ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();
                int resultado = reservaDAO.guardarReserva(cliente.getIdCliente(), mascota.getIdMascota(), selectedDate, horarioSeleccionado, true);

                if (resultado != -1) {
                    // Pintar la fila reci√©n agregada
                    TablaTurnos.setRowSelectionInterval(filaSeleccionada, filaSeleccionada);

                    // Resaltar la fila con un color 
                    TablaTurnos.setSelectionBackground(new java.awt.Color(173, 216, 230));

                    JOptionPane.showMessageDialog(this, "Reserva guardada exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo guardar la reserva. Cliente o mascota no encontrados.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ClassNotFoundException | SQLException ex) {

                ex.printStackTrace();
            }
        }
    }

//TERMINAR
    private void cancelarCita() throws Exception {
        obtenerInformacionCeldaSeleccionada();
        ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();

    }

//private void buscarClientePorDni() {
//        // Obtiene el documento ingresado en el campo de texto
//        //String documento = Utilidades.obtenerTextoDesdeCampo(jTDocumento);
//
//        // Verifica si el campo de documento est√° vac√≠o y muestra un mensaje de advertencia
//        if (valorDni.isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Debes escribir un documento");
//            return;
//        }
//
//        try {
//            // Obtiene el DNI como entero
//            int dni = Utilidades.obtenerEnteroDesdeCampo(jTDocumento);
//
//            // Intenta buscar un cliente con el DNI ingresado en la base de datos
//            ClienteDAO clienteD = ClienteDAO.obtenerInstancia();
//            Cliente cliente = clienteD.buscarListaClientexDni(dni);
//
//            estado = Estado.BUSCAR;
//            if (cliente == null) {
//
//                estado = Estado.NUEVO;
//            }
//
//            mostrarClienteEnFormulario(cliente);
//            idCliente = cliente.getIdCliente();
//
//            cargarTabla(cliente.getIdCliente());
//
//        } catch (NumberFormatException ex) {
//            JOptionPane.showMessageDialog(this, "Error: Debes ingresar un n√∫mero de documento v√°lido.");
//        } catch (Exception ex) {
//            Logger.getLogger(FormularioCliente.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
//
//    
    // M√©todo para inicializar la tabla de turnos
    void initTimeTable(LocalDate selectedDate) {
        TurnosModel.setRowCount(0);

        int horaInicio = 10;
        int horaFin = 18;

        ReservaDAO reservaDAO = ReservaDAO.obtenerInstancia();
        List<Reserva> listaDeReservas = new ArrayList<>();

        try {
            listaDeReservas = reservaDAO.buscarListaReservasxfecha(selectedDate);
        } catch (Exception ex) {
            Logger.getLogger(Horarios.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int hora = horaInicio; hora <= horaFin; hora++) {
            String horario = String.format("%02d:00", hora);

            boolean reservaEnEsteHorario = false;
            for (Reserva tipo : listaDeReservas) {
                // Obtener el horario de Reserva como un objeto LocalTime
                LocalTime horarioReserva = tipo.getHorario();

                // Convertir horario (cadena) a un objeto LocalTime
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                LocalTime horarioComparar = LocalTime.parse(horario, formatter);

                // Comparar los horarios
                if (horarioReserva.equals(horarioComparar)) {
                    TurnosModel.addRow(new Object[]{tipo.getHorario(), tipo.getCliente().getApellido() + ", " + tipo.getCliente().getNombre(), tipo.getMascota().getAlias()});
                    reservaEnEsteHorario = true;
                    break;
                }
            }

            if (!reservaEnEsteHorario) {
                TurnosModel.addRow(new Object[]{horario, "", ""});
            }
        }

        TablaTurnos.setModel(TurnosModel);

        TablaTurnos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int filaSeleccionada = TablaTurnos.getSelectedRow();
                if (filaSeleccionada != -1) {
                    String horarioSeleccionado = (String) TurnosModel.getValueAt(filaSeleccionada, 0);
                    String DniCliente = JOptionPane.showInputDialog("Ingrese el DNI del cliente:");
                    String nombreMascota = JOptionPane.showInputDialog("Ingrese el nombre de la mascota");

                    TurnosModel.setValueAt(DniCliente, filaSeleccionada, 1);
                    TurnosModel.setValueAt(nombreMascota, filaSeleccionada, 2);

                    TablaTurnos.repaint();
                }
            }
        });
    }

}
