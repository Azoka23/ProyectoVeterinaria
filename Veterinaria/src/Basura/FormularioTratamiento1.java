package Basura;

import veterinaria.Vistas.Estado;
import veterinaria.Vistas.DecimalDocumentFilter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import veterinaria.AccesoADatos.TratamientoDAO;
import veterinaria.Vistas.CustomPanel;
import veterinaria.Entidades.Cliente;
import veterinaria.Entidades.Tratamiento;
import veterinaria.Utilidades;
import veterinaria.Vistas.CustomPanel;
import veterinaria.Vistas.DecimalDocumentFilter;
import veterinaria.Vistas.Estado;

public class FormularioTratamiento1 extends javax.swing.JInternalFrame {

    private Estado estado = Estado.NADA;

    private Cliente selectedCliente = null;
    private int idMascotas = 0;
    private int idCliente = 0;
    private boolean estadoTratamiento;
    private String codigo;

    /**
     * Creates new form FormularioTratamiento
     */
    public FormularioTratamiento1() {
        CustomPanel customPanel = new CustomPanel(); // Crea un panel personalizado
        this.setContentPane(customPanel); // Establece el panel personalizado como el contenido del marco interno
       
        initComponents();
        setTitle("Cargar Tratamientos");

        // Obtener el Document asociado al campo de texto jTPesoA
        AbstractDocument doc = (AbstractDocument) jTImporte.getDocument();

        // Aplicar el DocumentFilter para reemplazar comas por puntos
        doc.setDocumentFilter(new DecimalDocumentFilter());

        // Agregar ActionListener al campo jTDocumento
        jTCodigo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Método para procesar el código
                codigo = Utilidades.obtenerTextoDesdeCampo(jTCodigo).trim();
                if (codigo.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debes escribir el Codigo");
                } else {
                    limpiarBuscar();
                    estado = Estado.BUSCAR;
                    buscarxCodigo();
                }
            }
        });
        // Asociar tecla "Enter" con componentes
        asociarCamposConEnter();

        // Configurar ActionListener para el botón de estado
        configurarEstadoTratamiento();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jLcodigo = new javax.swing.JLabel();
        jTCodigo = new javax.swing.JTextField();
        jTTipo = new javax.swing.JTextField();
        jLTipo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLDescripcion = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTADescripcion = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLImporte = new javax.swing.JLabel();
        jTImporte = new javax.swing.JTextField();
        jRBEstado = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jBBuscar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();

        setClosable(true);
        setNormalBounds(new java.awt.Rectangle(0, 0, 80, 0));
        setPreferredSize(new java.awt.Dimension(465, 410));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setOpaque(false);

        jLcodigo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLcodigo.setText("Codigo");

        jTCodigo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jTTipo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLTipo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLTipo.setText("Tipo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLcodigo)
                    .addComponent(jLTipo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTTipo)
                    .addComponent(jTCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                .addGap(43, 43, 43))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLcodigo)
                    .addComponent(jTCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLTipo)
                    .addComponent(jTTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setOpaque(false);

        jLDescripcion.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLDescripcion.setText("Descripcion");

        jTADescripcion.setColumns(20);
        jTADescripcion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTADescripcion.setRows(5);
        jScrollPane1.setViewportView(jTADescripcion);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLDescripcion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLDescripcion)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setOpaque(false);

        jLImporte.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLImporte.setText("Importe");

        jTImporte.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jRBEstado.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jRBEstado.setText("Estado");
        jRBEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(jRBEstado)
                .addGap(76, 76, 76))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLImporte)
                    .addComponent(jRBEstado))
                .addGap(18, 18, 18))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setOpaque(false);

        jBBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/search_find_lupa_21889.png"))); // NOI18N
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/Save_37110.png"))); // NOI18N
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/veterinaria/Imagenes/home256_24783.png"))); // NOI18N
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBBuscar)
                    .addComponent(jBGuardar)
                    .addComponent(jBSalir))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jBBuscar)
                .addGap(15, 15, 15)
                .addComponent(jBGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBSalir)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        getAccessibleContext().setAccessibleName("Formulario Tratamiento");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBEstadoActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jRBEstadoActionPerformed

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        String codigo = jTCodigo.getText().trim();

        if (codigo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debes escribir un Codigo");
            return;
        } else {
            //            try {
            limpiarBuscar();
            estado = Estado.BUSCAR;
            buscarxCodigo();
            //            } catch (ClassNotFoundException ex) {
            //                Logger.getLogger(FormularioMascotas.class.getName()).log(Level.SEVERE, null, ex);
            //            } catch (SQLException ex) {
            //                Logger.getLogger(FormularioMascotas.class.getName()).log(Level.SEVERE, null, ex);
            //            }

        }       // TODO add your handling code here:
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        try {
            if (camposVacios()) {
                JOptionPane.showMessageDialog(this, "No debe dejar algun dato vacio");
            } else {

                guardar();
                limpiar();

            }

        } catch (Exception ex) {
            Utilidades.mostrarError(ex, this);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        salirAplicacion();
        // TODO add your handling code here:
    }//GEN-LAST:event_jBSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JLabel jLDescripcion;
    private javax.swing.JLabel jLImporte;
    private javax.swing.JLabel jLTipo;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLabel jLcodigo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRBEstado;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTADescripcion;
    private javax.swing.JTextField jTCodigo;
    private javax.swing.JTextField jTImporte;
    private javax.swing.JTextField jTTipo;
    // End of variables declaration//GEN-END:variables

    private void salirAplicacion() {
        if (Utilidades.confirmarSalida(this)) {
            dispose();
        }
    }

    private boolean camposVacios() {
        return jTTipo.getText().isEmpty() || jTCodigo.getText().isEmpty() || jTImporte.getText().isEmpty() || jTADescripcion.getText().trim().isEmpty();
    }

    private void limpiar() {
        Utilidades.limpiarSetText(jTCodigo, jTTipo, jTImporte);
        jRBEstado.setSelected(false);
        jTADescripcion.setText("");
        estado = Estado.NADA;
        // Para limpiar el formulario y deseleccionar los JComboBox
        //JCSexo.setSelectedIndex(-1); // Desselecciona el elemento en el JComboBox
        //jCBClientes.setSelectedIndex(-1); // Desselecciona el elemento en el JComboBox

    }

    private void limpiarBuscar() {
        Utilidades.limpiarSetText(jTTipo, jTImporte);
        jTADescripcion.setText("");
        // Para limpiar el formulario y deseleccionar los JComboBox
        // JCSexo.setSelectedIndex(-1); // Desselecciona el elemento en el JComboBox
        //jCBClientes.setSelectedIndex(-1); // Desselecciona el elemento en el JComboBox
    }

    private void buscarxCodigo() {

        TratamientoDAO tratamientoD = TratamientoDAO.obtenerInstancia();
        int codigo = 0;

        try {
            codigo = Integer.parseInt(jTCodigo.getText());

            Tratamiento tratamiento = tratamientoD.buscarListaTratamientoxId(codigo);

            if (tratamiento != null) {
                setTitle("Cargar Tratamiento" + (tratamiento.isEstado() ? "" : " -- Codigo dado de Baja"));
                jRBEstado.setSelected(tratamiento.isEstado());

                mostrarTratamientoEnFormulario(tratamiento);
            } else {
                estado = Estado.NUEVO;
                JOptionPane.showMessageDialog(this, "No se encontró el codigo,el codigo disponible es " + ultimoRegistro());
                jTCodigo.setText(ultimoRegistro() + "");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: El código debe ser un número valido.");
        } catch (Exception ex) {
            Utilidades.mostrarError(ex, this);
        }
    }

    private void guardar() throws Exception {
        TratamientoDAO tratamientoD = TratamientoDAO.obtenerInstancia();
        Tratamiento tratamiento = new Tratamiento();
        int codigo = 0;

        try {
            try {
                codigo = Integer.parseInt(jTCodigo.getText());

                tratamiento = tratamientoD.obtenerTratamientoxId(codigo);

                if (tratamiento != null && estado.equals(Estado.NUEVO)) {

                    JOptionPane.showMessageDialog(this, "El Codigo ya existe, no puede darlo de Alta.");
                    return;
                } else {
                    tratamiento = new Tratamiento();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: Debes ingresar un número de documento válido.");
                return;
            }

            String tipo = jTTipo.getText();
            String descripcion = jTADescripcion.getText();
            double importe = Double.parseDouble(jTImporte.getText());
            boolean estadoMascota = jRBEstado.isSelected();

            // Asignar los valores al objeto Tratamiento
            //tratamiento.setIdTratamiento(tipo);
            tratamiento.setTipo(tipo);

            tratamiento.setDescripcion(descripcion);

            tratamiento.setImporte(importe);
            //tratamiento.setPesoActual(pesoA);
            // tratamiento.setIdCliente(idCliente);

            tratamiento.setEstado(estadoMascota);

            if (estado.equals(Estado.NUEVO)) {

                try {
                    tratamiento.setEstado(true);
                    tratamientoD.guardarTratamiento(tratamiento);
                } catch (Exception ex) {
                    Utilidades.mostrarError(ex, this);
                }

            } else if (estado.equals(Estado.BUSCAR)) {
                // mascota.setEstado(true);

                tratamientoD.modificarTratamiento(tratamiento);
            }
        } catch (NumberFormatException ex) {
            Utilidades.mostrarError(ex, this);
        }
    }

    private int ultimoRegistro() throws ClassNotFoundException, SQLException, Exception {
        TratamientoDAO tratamientoD = TratamientoDAO.obtenerInstancia();
        return tratamientoD.contarTotalRegistros();

    }

    private void mostrarTratamientoEnFormulario(Tratamiento tratamiento) {

        jTTipo.setText(tratamiento.getTipo());

        jTADescripcion.setText(tratamiento.getDescripcion());

        jTImporte.setText(tratamiento.getImporte() + "");

        if (tratamiento.isEstado()) {
            setTitle("Cargar Tratamiento");
        } else {
            setTitle("Tratamiento -- Codigo dado de Baja");
        }

        jRBEstado.setSelected(tratamiento.isEstado());
        estadoTratamiento = tratamiento.isEstado();

    }

    // Método para asociar la tecla Enter con componentes específicos
    private void asociarCamposConEnter() {
        // Utilidades.asociarEnterConComponente asocia la tecla Enter con el componente proporcionado como argumento  
        Utilidades.asociarEnterConComponente(jTCodigo, jTTipo);
        Utilidades.asociarEnterConComponente(jTTipo, jTADescripcion);
        Utilidades.asociarEnterConComponente(jTADescripcion, jTImporte);
        Utilidades.asociarEnterConComponente(jTImporte, jBBuscar);
    }

    // Método para configurar el cambio de estado de la mascota
    private void configurarEstadoTratamiento() {
        // Configura un ActionListener para el cambio de estado de la mascota 
        jRBEstado.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (estado.equals(Estado.BUSCAR)) {
                    confirmarCambioEstadoTratamiento();
                }
            }
        });
    }

    // Método para confirmar el cambio de estado del tratamiento
    private void confirmarCambioEstadoTratamiento() {
        //if (estado.equals(Estado.BUSCAR)) {
        int option = JOptionPane.showConfirmDialog(FormularioTratamiento1.this,
                "¿Está seguro de cambiar el estado del Tratamiento?",
                "Confirmar Cambio de Estado",
                JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            int codigo = Integer.parseInt(jTCodigo.getText());
            TratamientoDAO tratamientoD = TratamientoDAO.obtenerInstancia();

            try {
                if (estadoTratamiento) {
                    tratamientoD.bajaLogica(codigo);
                    setTitle("Tratamiento -- Codigo dado de Baja");
                    JOptionPane.showMessageDialog(FormularioTratamiento1.this, "El tratamiento ha sido dado de baja");
                } else {
                    tratamientoD.altaLogica(codigo);
                    setTitle("Mascota");
                    JOptionPane.showMessageDialog(FormularioTratamiento1.this, "El tratamiento ha sido dado de alta");
                }
            } catch (Exception ex) {
                Utilidades.mostrarError(ex, FormularioTratamiento1.this);
            }
        } else {
            jRBEstado.setSelected(!jRBEstado.isSelected());
        }
        // }
    }
}
